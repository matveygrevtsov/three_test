{"version":3,"sources":["components/Animation/Animator.ts","components/Animation/Animation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Animator","root","scene","camera","renderer","requestAnimation","animate","render","requestAnimationFrame","this","THREE","add","clientWidth","clientHeight","position","z","shadowMap","enabled","geometry","material","color","cube","window","addEventListener","resize","width","height","aspect","updateProjectionMatrix","setSize","setPixelRatio","Math","min","devicePixelRatio","appendChild","domElement","cancelAnimationFrame","Animation","rootRef","useRef","useEffect","current","animator","start","destroy","ref","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"iOAMaA,EAAb,WAOE,cAAsC,IAAD,OAAvBC,EAAuB,EAAvBA,KAAuB,yBANpBA,UAMoB,OALpBC,WAKoB,OAJpBC,YAIoB,OAHpBC,cAGoB,OAF7BC,sBAE6B,OA4C7BC,QAAU,WAChB,EAAKF,SAASG,OAAO,EAAKL,MAAO,EAAKC,QACtC,EAAKE,iBAAmBG,sBAAsB,EAAKF,UA7CnDG,KAAKR,KAAOA,EAGZQ,KAAKP,MAAQ,IAAIQ,IACjBD,KAAKP,MAAMS,IAAI,IAAID,IAAmB,SAAU,KAGhDD,KAAKN,OAAS,IAAIO,IAChB,GACAD,KAAKR,KAAKW,YAAcH,KAAKR,KAAKY,aAClC,GACA,KAEFJ,KAAKN,OAAOW,SAASC,EAAI,GAGzBN,KAAKL,SAAW,IAAIM,IACpBD,KAAKL,SAASY,UAAUC,SAAU,EAGlC,IAAMC,EAAW,IAAIR,IAAkB,EAAG,EAAG,GACvCS,EAAW,IAAIT,IAAwB,CAAEU,MAAO,WAChDC,EAAO,IAAIX,IAAWQ,EAAUC,GACtCV,KAAKP,MAAMS,IAAIU,GAEfZ,KAAKJ,iBAAmB,EAExBiB,OAAOC,iBAAiB,UAAU,kBAAM,EAAKC,YAnCjD,0CAsCE,WACE,IAAMC,EAAQhB,KAAKR,KAAKW,YAClBc,EAASjB,KAAKR,KAAKY,aAGzBJ,KAAKN,OAAOwB,OAASF,EAAQC,EAC7BjB,KAAKN,OAAOyB,yBAGZnB,KAAKL,SAASyB,QAAQJ,EAAOC,GAC7BjB,KAAKL,SAAS0B,cAAcC,KAAKC,IAAIV,OAAOW,iBAAkB,MAhDlE,mBAwDE,WACExB,KAAKR,KAAKiC,YAAYzB,KAAKL,SAAS+B,YAEpC1B,KAAKJ,iBAAmBG,sBAAsBC,KAAKH,SACnDG,KAAKe,WA5DT,qBA+DE,WACEY,qBAAqB3B,KAAKJ,sBAhE9B,K,OCHagC,EAAY,WACvB,IAAMC,EAAUC,iBAA8B,MAW9C,OATAC,qBAAU,WACR,IAAMvC,EAAOqC,EAAQG,QACrB,GAAKxC,EAAL,CACA,IAAMyC,EAAW,IAAI1C,EAAS,CAAEC,SAGhC,OAFAyC,EAASC,QAEF,kBAAMD,EAASE,cACrB,IAEI,qBAAKC,IAAKP,EAASQ,UAAU,oBCPvBC,MAJf,WACE,OAAO,cAAC,EAAD,KCSMC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASlD,OACP,cAAC,IAAMmD,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.438fb2cf.chunk.js","sourcesContent":["import * as THREE from 'three'\n\ninterface AnimatorProps {\n  root: HTMLDivElement\n}\n\nexport class Animator {\n  private readonly root: HTMLDivElement\n  private readonly scene: THREE.Scene\n  private readonly camera: THREE.PerspectiveCamera\n  private readonly renderer: THREE.WebGLRenderer\n  private requestAnimation: number\n\n  constructor({ root }: AnimatorProps) {\n    this.root = root\n\n    // Объявляем сцену\n    this.scene = new THREE.Scene()\n    this.scene.add(new THREE.AmbientLight(0xffffff, 0.9))\n\n    // Объявляем камеру\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.root.clientWidth / this.root.clientHeight,\n      0.1,\n      1000,\n    )\n    this.camera.position.z = 10\n\n    // Объявляем renderer\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.shadowMap.enabled = true\n\n    // Добавляем кубик\n    const geometry = new THREE.BoxGeometry(7, 7, 7)\n    const material = new THREE.MeshBasicMaterial({ color: 0xff99ff })\n    const cube = new THREE.Mesh(geometry, material)\n    this.scene.add(cube)\n\n    this.requestAnimation = 0\n\n    window.addEventListener('resize', () => this.resize())\n  }\n\n  private resize() {\n    const width = this.root.clientWidth\n    const height = this.root.clientHeight\n\n    // Update camera\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n\n    // Update renderer\n    this.renderer.setSize(width, height)\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n  }\n\n  private animate = (): void => {\n    this.renderer.render(this.scene, this.camera)\n    this.requestAnimation = requestAnimationFrame(this.animate)\n  }\n\n  public start() {\n    this.root.appendChild(this.renderer.domElement)\n\n    this.requestAnimation = requestAnimationFrame(this.animate)\n    this.resize()\n  }\n\n  public destroy() {\n    cancelAnimationFrame(this.requestAnimation)\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport { Animator } from './Animator'\n\nexport const Animation = () => {\n  const rootRef = useRef<HTMLDivElement | null>(null)\n\n  useEffect(() => {\n    const root = rootRef.current\n    if (!root) return\n    const animator = new Animator({ root })\n    animator.start()\n\n    return () => animator.destroy()\n  }, [])\n\n  return <div ref={rootRef} className=\"animation-root\" />\n}\n","import React from 'react'\nimport './App.css'\nimport { Animation } from './components/Animation/Animation'\n\nfunction App() {\n  return <Animation />\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}